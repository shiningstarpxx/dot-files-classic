# !/bin/bash
#
# Login Shell Profile
# -------------------
# Definitions for:
# 1. Login messages
# 2. Shell Prompt
# 3. Shell PATH environment
#
# @author paolodedios
#
########################################################################################

########################################################################################
# When an interactive shell is started (log in, open terminal or iTerm
# in OS X, or create a new tab in iTerm) the following files are read
# and run, in this order:
#
# 1. /etc/profile
# 2. /etc/bashrc
# 3. .bash_profile
# 4. .profile
# 5. .bashrc (only because this file is run (sourced) in .bash_profile)
#
# When an interactive shell, that is not a login shell, is started 
# (when you run "bash" from inside a shell, or when you start a shell
# in xwindows [xterm/gnome-terminal/etc] ) the following files are read
# and executed, in this order:
# 
# 1. /etc/bashrc
# 2. .bashrc
########################################################################################

########################################################################################
# Identify OS and Machine
########################################################################################

export OS=`uname -s | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export OSVERSION=`uname -r`; OSVERSION=`expr "$OSVERSION" : '[^0-9]*\([0-9]*\.[0-9]*\)'`
export MACHINE=`uname -m | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export PLATFORM="$MACHINE-$OS-$OSVERSION"

########################################################################################
# Path
########################################################################################

# OS-X Specific, with MacPorts installed
if [ "$OS" = "darwin" ] ; then

    # MacPorts versions take precedence
    export PATH=/opt/local/bin:/opt/local/sbin:$PATH
    
    # Java HOME and CLASSPATH    
    export JAVA_HOME=/Library/Java/Home

    # Locally configured, user-specific binaries
    export LOCAL_APP_HOME=~/Applications

    # Project directory
    export LOCAL_PROJECTS=~/Projects

else

    # Locally configured, user-specific binaries
    export LOCAL_APP_HOME=~/apps

    # Project directory
    export LOCAL_PROJECTS=~/projects
fi

# Python virtual environment
if [ -e `type -p virtualenvwrapper.sh` ]; then

    # virtualenv working directory
    export WORKON_HOME=$HOME/.virtualenvs

    # make pip use the same directory for virtualenvs as virtualenvwrapper
    export PIP_VIRTUALENV_BASE=$WORKON_HOME

    # makes pip detect an active virtualenv and install to it, without
    # having to pass it the -E parameter
    export PIP_RESPECT_VIRTUALENV=true

    # ensure that all new environments are isolated from the system
    # site-packages directory by passing "no-site-packages" as the default
    # argument for virtualenv
    export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'

    # load virtualenv wrapper functions
    source virtualenvwrapper.sh > /dev/null 2>&1
fi

######################################################################################
# Declare platform agnostic applications
######################################################################################

if [ -d $LOCAL_APP_HOME ]; then
    # Declare platform agnostic applications
    export EC2_API_TOOLS_VERSION=aws-ec2-api-tools-1.5.2.4
    export CSVKIT_VERSION=csvkit-0.4.4
    export PLAY_FRAMEWORK_VERSION=play-1.2.5
    export VISUALVM_VERSION=visualvm-1.3.4
fi

######################################################################################
# Add local applications to PATH
######################################################################################

# Add local binaries to the path, if you have it.
if [ -d $LOCAL_APP_HOME/bin ]; then

    # Create local bin PATH variable
    export LOCAL_BIN_PATH=$LOCAL_APP_HOME/bin

    # Create EC2 PATH variable
    if [ -d $LOCAL_BIN_PATH/$EC2_API_TOOLS_VERSION ]; then
        export EC2_HOME=$LOCAL_BIN_PATH/$EC2_API_TOOLS_VERSION
    fi
    
    # Create CSVkit PATH variable
    if [ -d $LOCAL_BIN_PATH/$CSVKIT_VERSION ]; then
        export CSVKIT_HOME=$LOCAL_BIN_PATH/$CSVKIT_VERSION
    fi
    
    # Create Play! Framework PATH variable
    if [ -d $LOCAL_BIN_PATH/$PLAY_FRAMEWORK_VERSION ]; then
        export PLAY_FRAMEWORK_HOME=$LOCAL_BIN_PATH/$PLAY_FRAMEWORK_VERSION
    fi
    
    # Create VisualVM PATH variable
    if [ -d $LOCAL_BIN_PATH/$VISUALVM_VERSION ]; then
        export VISUALVM_HOME=$LOCAL_BIN_PATH/$VISUALVM_VERSION
    fi
    
    # Append platform agnostic tools to PATH
    export PATH=$LOCAL_BIN_PATH:$EC2_HOME/bin:$CSVKIT_HOME:$PLAY_FRAMEWORK_HOME:$VISUALVM_HOME/bin:$PATH  
fi

# Add local data and log folder to the path, if you have it.
if [ -d $LOCAL_APP_HOME/var ]; then
    export LOCAL_LOG_PATH=$LOCAL_APP_HOME/var/log
    export LOCAL_DATA_PATH=$LOCAL_APP_HOME/var/data
fi

# Personal projects directory
if [ -d $HOME/$LOCAL_PROJECTS ]; then
    export PROJECT_HOME=$HOME/$LOCAL_PROJECTS
fi

########################################################################################
# Load in .bashrc
########################################################################################

if [ -e ~/.bashrc ]; then
    source ~/.bashrc > /dev/null 2>&1
    select_jdk7
fi

########################################################################################
# Print system information
########################################################################################

if [ `type -t sysinfo` = "function" ] ; then
    sysinfo
fi


