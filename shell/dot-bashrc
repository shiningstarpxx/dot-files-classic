# !/bin/bash
#
# Standard Shell Profile
# ----------------------
# Definitions for:
# 1. Shell Functions
# 2. Shell aliases
#
# @author paolodedios
#
########################################################################################


########################################################################################
# Load in bash-completion package
########################################################################################

if [ -f /opt/local/etc/bash_completion ]; then
    . /opt/local/etc/bash_completion > /dev/null 2>&1
else
    complete -W "$(echo $(grep '^ssh ' .bash_history | sort -u | sed 's/^ssh //'))" ssh
fi

########################################################################################
# Set Prompt
########################################################################################

export CLICOLOR=1

export PROMPT_USER="\[\033[1;31m\]\u\[\033[0m\]"
export PROMPT_HOST="\[\033[1;35m\]\h\[\033[0m\]"
export PROMPT_PATH="\[\033[1;33m\]\w\[\033[0m\] \[\033[1;32m\]"

export PS1='\n\[\033[1;31m\]\u\[\033[0m\]@\[\033[1;35m\]\h\[\033[0m\]:\[\033[1;33m\]\w\[\033[0m\] \[\033[1;32m\]$(hg_in_repo)$(hg_branch)$(hg_dirty)$(git_branch)\[\033[0m\] \n$ '


########################################################################################
# Quick system information
########################################################################################

function sysinfo()
{
    echo -e  "Kernel: " `uname -smr`
    echo -ne "Uptime:  "; uptime
    echo -ne "Time  :  "; date
}

########################################################################################
# Mercurial Functions
########################################################################################

function hg_dirty()
{
    hg status 2> /dev/null \
    | awk '$1 == "?" { unknown = 1 } 
           $1 != "?" { changed = 1 }
           END {
             if (changed) printf "*"
             else if (unknown) printf "?" 
           }'
}

function hg_in_repo()
{
    [[ `hg branch 2> /dev/null` ]] && echo 'on '
}

function hg_branch()
{
    hg branch 2> /dev/null
}


########################################################################################
# Git Functions
########################################################################################

function git_dirty()
{
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

function git_branch()
{
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/on \1$(git_dirty)/"
}

######################################################################################
# Java Switcher
######################################################################################

function select_jdk6()
{
    export JAVA_HOME=$(/usr/libexec/java_home -v 1.6.0) 
}

function select_jdk7()
{
    export JAVA_HOME=$(/usr/libexec/java_home -v 1.7.0) 
}

######################################################################################
# Java Decompiler(JAD) standard command
######################################################################################

# Execute JAD with standard options

function jadexec()
{
    find . -name \*.class |xargs jad -b -d "$1" -dead -ff -i -o -r -radix10 -s .java -safe -stat
}

# Execute JAD with fully qualified names and with verbose processing output

function jadexecv()
{
    find . -name \*.class |xargs jad -b -d "$1" -dead -f -ff -i -o -r -radix10 -s .java -safe -stat -v
}

######################################################################################
# File & string-related functions
######################################################################################

# Find a file with a pattern in name:
function ff()
{
    find . -type f -iname '*'$*'*' -ls ;
}

# Find a directory with a pattern in name:
function fd()
{
   find . -type d -iname '*'$*'*' -ls ;
}

# Case insensitive, excluding svn folders
function fesvn()
{
    find . -path '*/.svn' -prune -o -type f -print0 | xargs -0 grep -I -n -e "$1"
}

# Case insensitive, excluding git folders
function fegit()
{
    find . -path '*/.git*' -prune -o -type f -print0 | xargs -0 grep -I -n -e "$1"
}

# Find a file with pattern $1 in name and Execute $2 on it:
function fe()
{
    find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ;
}


# Find a pattern in a set of files and highlight them:
# (needs a recent version of egrep)
function fstr()
{
    OPTIND=1
    local case=""
    local usage="fstr: find string in files. Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
        i) case="-i " ;;
        *) echo "$usage"; return;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
    xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more 

}

# cut last n lines in file, 10 by default
function cuttail() 
{
    nlines=${2:-10}
    sed -n -e :a -e "1,${nlines}!{P;N;D;};N;ba" $1
}

# move filenames to lowercase
function lowercase()  
{
    for file ; do
        filename=${file##*/}
        case "$filename" in
        */*) dirname==${file%/*} ;;
        *) dirname=.;;
        esac
        nf=$(echo $filename | tr A-Z a-z)
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname"
        else
            echo "lowercase: $file not changed."
        fi
    done
}


# Swap 2 filenames around, if they exist
function swap()  
{                
    local TMPFILE=tmp.$$ 

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE 
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Handy Extract command
function extract()      
{
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via func extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

#######################################################################################
# Process/system related functions:
#######################################################################################

function my_ps()
{
    ps $@ -u $USER -o pid,%cpu,%mem,time,command ;
}


function pp()
{
    my_ps -f | awk '!/awk/ && $0~var' var=${1:-".*"} ;
}

# Kill by process name.
function killps()                 
{
    local pid pname sig="-TERM"   # Default signal.
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} ) ; do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}


#######################################################################################
# Misc utilities
#######################################################################################

function repeat() 
{
    # Repeat n times command.
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do
        eval "$@";
    done
}

function tmslow()
{
    echo "Reducing Time Machine priority..."
    sudo renice +5 -p `ps -axc | grep backupd | awk '{ print \$1 }'`
}

#######################################################################################
# AWS Helpers
#######################################################################################

function aws-usekey()
{
    echo "Using AWS EC2 X.509 private key : [$1]"
    export EC2_PRIVATE_KEY=$1
}

function aws-usecert()
{
    echo "Using AWS EC2 X.509 certificate : [$1]"
    export EC2_CERT=$1
}

function aws-use-endpoint()
{
    echo "Using AWS region endpoint : [$1]"
    export EC2_URL="http://$1"
}


########################################################################################
# Always use VIM
########################################################################################

alias vi='vim'

########################################################################################
# Mercurial aliases
########################################################################################

alias hgstat='hg status'

########################################################################################
# Git/GitHub aliases
########################################################################################

alias gitstat='git status'
alias git-add-upstream='git remote add upstream'
alias git-pull-upstream='git pull upstream master'

#######################################################################################
# Basic command aliases
#######################################################################################

alias reload-bash='source ~/.profile'

alias jj='jobs -l'

alias hh='history'
alias which='type -a'
alias whichpath='type -p'

alias path='echo -e ${PATH//:/\\n}'
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'

alias cd..='cd ..'
alias ..='cd ..'
alias .='echo $PWD'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -p'

alias du='du -kh'
alias df='df -kTh'

alias systail='tail -f /var/log/system.log'

alias untar='tar xvzf'
alias objectdump='od'

# Make grep more user friendly by highlighting matches and exclude grepping
# through git folders.
alias grep='grep --color=auto'

#######################################################################################
# Copies folder and all sub files and folders, preserving security and dates
#######################################################################################

alias cp-folder="cp -Rpv" 

#######################################################################################
# Shows most used commands
# http://lifehacker.com/software/how-to/turbocharge-your-terminal-274317.php
#######################################################################################

alias profileme="history | awk '{print \$2}' | awk 'BEGIN{FS=\"|\"}{print \$1}' | sort | uniq -c | sort -n | tail -n 20 | sort -nr"
 
#######################################################################################
# Lists folders and files sizes in the current folder
#######################################################################################

alias ducks='du -cksh * | sort -rn | head -11'
alias du1='du -h -d 1'

#######################################################################################
# tailoring 'less'
#######################################################################################

alias more='less'

#######################################################################################
# Prevents accidentally clobbering files.
#######################################################################################

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias mkdir='mkdir -p'

#######################################################################################
# The 'ls' family (this assumes you use a recent GNU ls)
#######################################################################################

alias la='ls -lAxh'                 # show all, including hidden files
alias ll='ls -l'                    # show all, exclude hidden files

alias lx='ls -lxB'                  # sort by extension
alias lk='ls -lSr'                  # sort by size, biggest last
alias lc='ls -ltcr'                 # sort by and show change time, most recent last
alias lu='ls -ltur'                 # sort by and show access time, most recent last
alias lt='ls -ltr'                  # sort by date, most recent last
alias lm='ls -al |more'             # pipe through 'more'
alias lr='ls -lR'                   # recursive ls

#######################################################################################
# Networking related aliases
#######################################################################################

alias ping='ping -c 10'
alias openports='netstat -nap tcp'
alias ns='netstat -alnp tcp | grep -v CLOSE_WAIT | cut -c-6,21-94 | tail +2'

######################################################################################
# Aliases for python and gcc version selection via MacPorts
######################################################################################

alias python_list='sudo port select --list python'
alias python_select='sudo port select --set python'

alias gcc_list='sudo port select --list gcc'
alias gcc_select='sudo port select --set gcc'

######################################################################################
# Java related aliases
######################################################################################

alias maven='mvn3'
alias m2='mvn2'
alias m3='mvn3'

######################################################################################
# Python virtualenvwrapper aliases
######################################################################################

# create a new virtual environment
alias pymkenv='mkvirtualenv'

# switch to a specific virtual environment
alias pystartenv='workon'

# stop using the current virtual environment
alias pystopenv='deactivate'

# list virtual environments
alias pylsenv='lsvirtualenv'

# remove virtual environment
alias pyrmenv='rmvirtualenv'

# copy virtual environment
alias pycpenv='cpvirtualenv'

# change dir to top level of current virtual environment
alias pycdenv='cdvirtualenv'

# list site-packages for current virtual environment
alias pylsenvpkgs='lssitepackages'


######################################################################################
# Config file editing aliases
######################################################################################

# Put list of remote hosts in ~/.hosts
export HOSTFILE=$HOME/.hosts
export SYSHOSTFILE=/etc/hosts   

alias hostedit='sudo vim ${SYSHOSTFILE}'
alias myhostedit='sudo vim ${HOSTFILE}'

######################################################################################
# Command history customization
######################################################################################

# Avoid succesive duplicates in the bash command history
export HISTCONTROL=ignoredups
 
# Append commands to the bash command history file (~/.bash_history) instead of overwriting
shopt -s histappend
 
# Force bash to re-read the history file and then append commands to the history
# every time a prompt is shown, instead of after closing the session.
PROMPT_COMMAND='history -a'

######################################################################################
# Declare platform specific applications
######################################################################################

if [ "$OS" = "darwin" ]; then
    # Declare OS X specific applications
    export MYSQL_DB_VERSION=mysql-5.5.21-osx-x86_64
fi

######################################################################################
# Platform specific aliases
######################################################################################

if [ "$OS" = "darwin" ] ; then
    
    # Override XCode4/gcc tendency to use arch=PPC when building libraries
    export ARCHFLAGS="-arch i386 -arch x86_64"

    # Create command alias for lsregister
    export CORE_SERVICES_PATH=/System/Library/Frameworks/CoreServices.framework
    export LAUNCH_SERVICES_PATH=Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/
    export LS_REGISTER_PATH=$CORE_SERVICES_PATH/$LAUNCH_SERVICES_PATH

    alias rebuild-menu='$LS_REGISTER_PATH/lsregister -kill -r -domain local -domain system -domain user'

    # Cleanup Resource Forks
    alias cleanresforks='find . -name \*._*|xargs \rm'

    # Octave CLI
    alias octave="exec '/Applications/Octave.app/Contents/Resources/bin/octave'"

    # Copy emacs configuration to Aquamacs pref directory
    alias refreshaquamacsconfig='cp ~/.emacs ~/Library/Preferences/Aquamacs\ Emacs/Preferences.el'

    # Multiprocess Aquamacs Alias
    alias aquamacs='/Applications/Aquamacs.app/Contents/MacOS/Aquamacs'

    # Open file in the current Aquamacs window
    alias openwithaquamacs='open -a /Applications/Aquamacs.app $1'

    # Create local MySQL database tool PATH variable
    if [ -d $LOCAL_BIN_PATH/$MYSQL_DB_VERSION ]; then
        export MYSQL_DB_HOME=$LOCAL_BIN_PATH/$MYSQL_DB_VERSION
    fi
    
    # Add OS-X specific binaries to PATH
    export PATH=$MYSQL_DB_HOME/bin:$PATH
fi


